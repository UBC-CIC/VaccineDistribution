version: 1
backend:
  phases:
    build:
      commands:
        - '# Execute Amplify CLI with the helper script'
        - amplifyPush --simple
    postBuild:
      commands:
        - yum install -y jq
        - export AWSACCOUNTID=$(aws sts get-caller-identity --query Account --output text)
        - export AWSREGION=$(aws configure get region)
        - export PROJECT_NAME=$(cat ./amplify/.config/project-config.json | jq -r '.projectName')
        - export REACT_APP_MAP_NAME=$(aws location list-maps --query 'Entries[*].[MapName]' --output text | grep -i -m1 ${PROJECT_NAME})
        - if [ -z "$REACT_APP_MAP_NAME" ]; then aws location create-map --map-name ${PROJECT_NAME}Map --configuration "Style=VectorEsriLightGrayCanvas" --pricing-plan "RequestBasedUsage"; fi
        - echo "REACT_APP_MAP_NAME=$REACT_APP_MAP_NAME" >> .env
        - export S3AMPLIFY=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=user:Application,Values=${PROJECT_NAME} --resource-type-filters s3 --query 'ResourceTagMappingList[*].[ResourceARN]' --output text | grep -i deployment | cut -c14-)
        - export AMPLIFYROLENAME=${S3AMPLIFY/deployment/authRole}
        - export LOCATION_POLICY=$(aws iam list-policies --query "Policies[*].[PolicyName]" --scope Local --output text | grep -i ${PROJECT_NAME}-location)
        - if [ -z "$LOCATION_POLICY" ]; then aws iam create-policy --policy-name ${PROJECT_NAME}-location --policy-document file://location-policy.json; fi
        - export LOCATION_ROLE_POLICY=$(aws iam list-attached-role-policies --role-name ${AMPLIFYROLENAME} --query 'AttachedPolicies[*].[PolicyName]' --output text | grep -i ${PROJECT_NAME}-location)
        - if [ -z "$LOCATION_ROLE_POLICY" ]; then aws iam attach-role-policy --role-name ${AMPLIFYROLENAME} --policy-arn arn:aws:iam::${AWSACCOUNTID}:policy/${PROJECT_NAME}-location; fi  
frontend:
  phases:
    preBuild:
      commands:
        - export AWSREGION=$(aws configure get region)        
        - export PROJECT_NAME=$(cat ./amplify/.config/project-config.json | jq -r '.projectName')
        - export S3DEPLOYMENTBUCKET=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=user:Application,Values="${PROJECT_NAME}" --resource-type-filters s3 --query 'ResourceTagMappingList[*].[ResourceARN]' --output text | grep deployment | awk -F':::' '{print $2}')
        - CONTAINERTABLE=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=user:Application,Values="${PROJECT_NAME}" --resource-type-filters dynamodb --query 'ResourceTagMappingList[*].[ResourceARN]' --output text | cut -f2- -d/ | grep -i container)
        - aws ssm put-parameter --name "/vaccine/table/container" --type String --value "${CONTAINERTABLE}" --overwrite
        - SENSORTABLE=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=user:Application,Values="${PROJECT_NAME}" --resource-type-filters dynamodb --query 'ResourceTagMappingList[*].[ResourceARN]' --output text | cut -f2- -d/ | grep -i sensor-)
        - aws ssm put-parameter --name "/vaccine/table/sensor" --type String --value "${SENSORTABLE}" --overwrite
        - SENSORREADINGTABLE=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=user:Application,Values="${PROJECT_NAME}" --resource-type-filters dynamodb --query 'ResourceTagMappingList[*].[ResourceARN]' --output text | cut -f2- -d/ | grep -i sensorreading)
        - aws ssm put-parameter --name "/vaccine/table/sensorreading" --type String --value "${SENSORREADINGTABLE}" --overwrite
        - USERTABLE=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=user:Application,Values="${PROJECT_NAME}" --resource-type-filters dynamodb --query 'ResourceTagMappingList[*].[ResourceARN]' --output text | cut -f2- -d/ | grep -i linkuser)
        - aws ssm put-parameter --name "/vaccine/table/user" --type String --value "${USERTABLE}" --overwrite
        - GPSREADINGTABLE=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=user:Application,Values="${PROJECT_NAME}" --resource-type-filters dynamodb --query 'ResourceTagMappingList[*].[ResourceARN]' --output text | cut -f2- -d/ | grep -i gpsreading)
        - aws ssm put-parameter --name "/vaccine/table/gpsreading" --type String --value "${GPSREADINGTABLE}" --overwrite
        - export POOLID=$(aws cognito-idp list-user-pools --max-results 50 --query 'UserPools[*].[Id,Name]' --output text | grep -i -m1 ${PROJECT_NAME} | cut -c1-19)
        - aws ssm put-parameter --name "/vaccine/poolid" --type String --value "${POOLID}" --overwrite
        - sam deploy --s3-bucket ${S3DEPLOYMENTBUCKET}  --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM --region ${AWSREGION} --stack-name ${PROJECT_NAME}-Backend
        - yarn install
    build:
      commands:
        - yarn run build
        - node ./node_modules/gulp/bin/gulp.js
  artifacts:
    baseDirectory: build
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
